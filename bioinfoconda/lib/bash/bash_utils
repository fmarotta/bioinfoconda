source $BIOINFO_ROOT/bioinfoconda/lib/bash/bash_functions

#######
# cdp #
#######

export BIOINFOCONDA_OLDPWD="${BIOINFO_ROOT}/prj"

# Update BIOINFOCONDA_OLWPWD
function cd
{
        # Find current project, if any
        cur_prj=""
        if extract_prj $PWD > /dev/null; then
                cur_prj=`extract_prj $PWD`
        fi

        # Find new project (exclude cd options), if any
        new_prj=""
        for p in $*; do
                if [[ $p != "-"* ]] && extract_prj $(absolutise $p) > /dev/null; then
                        dest=$p
                        new_prj=`extract_prj $(absolutise $dest)`
                fi
        done

        # If we are entering another project...
        if [ "$new_prj" != "" ]; then
                # ...From another project
                if [ "$cur_prj" != "" ] && [ $cur_prj != $new_prj ]; then
                        BIOINFOCONDA_OLDPWD=$PWD
                fi
		# Elif we go out to the outside world...
        elif [ "$new_prj" == "" ]; then
                # ...From a project
                if [ "$cur_prj" != "" ]; then
                        BIOINFOCONDA_OLDPWD=$PWD
                fi
        fi

        builtin cd "$@"
        return $?
}

# Note that in cdp we use the cd function we defined above, therefore we 
# need not worry about updating BIOINFOCONDA_OLDPWD
function cdp
{
        prj_root=${BIOINFO_ROOT}/prj

        if [ "$#" == "0" ]; then
                cd $prj_root
        elif [ "$#" == "1" ]; then
                if [ $1 == "-" ]; then
                        cd $BIOINFOCONDA_OLDPWD
				elif [ $1 == "." ]; then
						if extract_prj $PWD > /dev/null; then
								cur_prj=`extract_prj $PWD`
								cd $prj_root/$cur_prj/dataset
						else
								cd $prj_root
						fi
                else
                        cd $prj_root/$1
                fi
        else
                echo "ERROR: Too many arguments."
                echo "Usage: cdp [prjname]"
                return 1
        fi

        return $?
}
