#####################
# Logging Functions #
#####################

# FIXME: perhaps warn and info should not print to stderr.

# Input: error string
function bug()
{
	>&2 echo "BUG: $1"
	exit 99
}

# Input: error string, exit code
function error()
{
	>&2 echo "ERROR: $1"

	re='^[0-9]+$'
	if ! [[ $2 =~ $re ]] ; then
		bug "argument to error() is not a number."
	else
		exit $2
	fi
}

# Input: warning string
function warn()
{
	>&2 echo "WARNING: $1"
}

# Input: info string
function info()
{
	>&2 echo "INFO: $1"
}

###############################
# Path Manipulation Functions #
###############################

# NOTE: By "Output" we mean what is sent to the standard output; the 
# return value is 0 if no error occurred, different from 0 otherwise.

# Input: an absolute path
# Output: the project contained in that path, if any
function extract_prj
{
        if [[ $1 != "${BIOINFO_ROOT}/prj"* ]]; then
                return 1
        fi

        if [ "$1" == "$BIOINFO_ROOT/prj" ]; then
                echo $BIOINFO_ROOT/prj
        else
                echo $1 | cut -d '/' -f 4
        fi

        return 0
}

# Input: a relative path
# Output: the absolute path
function absolutise
{
        if [[ $1 == "/"* ]]; then
                echo $1
                return 0
        fi

        abs_path=$PWD
        rel_path=`echo $1 | sed 's#^./##'`

        for d in `echo $rel_path | cut -d '/' -f 1- --output-delimiter=' '`; do
                if [ "$d" == ".." ]; then
                        abs_path=`dirname $abs_path`
                else
                        abs_path=$abs_path"/"$d
                fi
        done

        echo $abs_path
        return 0
}
